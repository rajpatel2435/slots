---
import Layout from "../layouts/Layout.astro";

---

<Layout title="search">

<div
class="header-background bg-[url('https://slotsparadise.com/wp-content/uploads/2022/07/thebeach-guides.jpg')] bg-cover bg-center py-16 flex items-center text-white font-giloryRegular mt-52"
>
    <div class="header-content-row w-[80%] mx-auto">
        <div class="page-title text-center">
        <h1
            class="entry-title text-2xl md:text-3xl font-giloryExtrabold mb-2 text-center text-white"
        >
            Online Casino Guides
        </h1>

        <p
            class="text-[22px] font-giloryRegular font-semibold text-white text-center max-w-[800px] mx-auto px-2"
        >
            If you are looking for casino guides and tips to increase your chances
            of winning, this is the perfect section for you. Check it at Slots
            Paradise Casino!
        </p>

        
        <div id="search-container" class='max-w-md mx-auto mt-2'>
    <div class="relative flex items-center w-full h-12 rounded-lg focus-within:shadow-lg bg-white overflow-hidden">
        <div class="grid place-items-center h-full w-12 text-gray-300">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
        </div>
        <div class="form w-full">
        <input
        class="peer h-full w-full outline-none text-base text-[#666] pr-2 font-giloryRegular font-semibold"
        type="text"
        name="search"
        id="search"
        placeholder="Search something.." /> 
        </div>
        
    </div>
    </div> 

        </div>
    </div>
  </div>
    

<div class="page_section mt-5 font-giloryRegular font-semibold max-w-[1200px] mx-auto md:mt-10">
    <section aria-label="Search Results">
        <div class="inner_container flex flex-col-reverse md:flex-row justify-between px-2 mb-10">

            <div class="section-container w-full md:w-3/4 mt-5 md:mt-0 pl-0 md:pl-2 xl:pl-10">
                <p id="searchReadout" class="mb-4"></p>
                <div id="searchResults"></div>
            </div>
        </div>
    </section>
</div>
            
</Layout>


<script>

    //console.log(data);
    
    import DOMPurify from "dompurify";
    import Fuse from "fuse.js";


    let SEARCH_DATA; 
    let FUSE_INSTANCE;
        const FUSE_OPTIONS = {
            includeScore: true,
            shouldSort: true,
            threshold: 0.5,
            keys: [
                {
                    name: "title",
                    weight: 1,
                },
                {
                    name: "description",
                    weight: 0.75,
                },
            ],
        };

    const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#000000" viewBox="0 0 256 256" id="spinner"><path d="M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z"></path><style>
				#spinner {
					animation: spin 1s linear infinite;
				}
				@keyframes spin {
					100% {
						transform: rotate(360deg);
					}
				}
				</style></svg>`;

    // selectors            
    const search = document.querySelector("#search");
    const searchReadout = document.querySelector("#searchReadout");
    const resultsList = document.querySelector("#searchResults");

    //functions
    function updateDocumentTitle(searchTerm){
        document.title = searchTerm 
            ? `Search result for ${searchTerm}`
            : "Search for the Guide";
    }
    
    function updateSearchReadout(searchTerm){
        searchReadout.textContent = searchTerm 
            ? `Search result for "${searchTerm}"`
            : "Type something for search results";
    }

    function generateSearchList(results) {
				return results
					.map((r) => {
						const { title, uri, excerpt } = r.item;
						return `<div class="mb-3">
                <a class="text-[#666]" href="${uri}">
                    <h3 class="text-[#ff688b] font-medium font-giloryExtrabold text-xl sm:text-2xl">${title}</h3>
                    <p>${excerpt}</p>
                </a>
            </div>`;
					})
					.join("");
			}
 

    async function fetchSearchResults(search) {
				// Immediately return if search is empty
        if (!search || search.length === 0) {
            resultsList.innerHTML = ""; // Clear previous results
            return;
        }

        resultsList.innerHTML = SPINNER;

        if (!SEARCH_DATA) {
            try {
                const res = await fetch("https://slotsparadise.com/the-beach/search.json/");
                if (!res.ok) {
                    throw new Error("Something went wrongâ€¦please try again");
                }
                const data = await res.json();
                SEARCH_DATA = data;
            } catch (e) {
                console.error(e);
            }
        }
                
        if (SEARCH_DATA && !FUSE_INSTANCE) {
            FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
        }
        if (!FUSE_INSTANCE) return;
        const searchResult = FUSE_INSTANCE.search(search);
        //console.log("ðŸš€ ~ fetchSearchResults ~ searchResult:", searchResult);
        // Limit the number of results to 20
        const limitedResults = searchResult.slice(0, 20);
    
        resultsList.innerHTML =
            limitedResults.length > 0
                ? generateSearchList(limitedResults)
                : "No results foundâ€¦";
	}

            

    window.addEventListener("DOMContentLoaded", () => {
    const urlParams = DOMPurify.sanitize(new URLSearchParams(window.location.search).get("q"));
    console.log("Search term from URL:", urlParams); // Check if search term is passed
    fetchSearchResults(urlParams);
    updateDocumentTitle(urlParams);
    updateSearchReadout(urlParams);
    search.value = urlParams;
    search.focus();
    });

    search.addEventListener("input", () => {
    const searchTerm = DOMPurify.sanitize(search.value);
    updateDocumentTitle(searchTerm);
    updateSearchReadout(searchTerm);
    fetchSearchResults(searchTerm);
    });


</script>


